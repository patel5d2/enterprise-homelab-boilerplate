# Prometheus Monitoring Service Configuration
# Time-series monitoring and alerting system

service_name: "prometheus"
display_name: "Prometheus"
category: "monitoring"
description: "Time-series database and monitoring system for metrics collection"
required: false
default_enabled: true

# Docker configuration
docker:
  image: "prom/prometheus:latest"
  container_name: "prometheus"
  restart: "unless-stopped"
  
  ports:
    - "9090:9090"
  
  volumes:
    - "prometheus-data:/prometheus"
    - "prometheus-config:/etc/prometheus"
  
  networks:
    - "traefik"
  
  environment:
    - "TZ=${TIMEZONE}"
  
  command:
    - "--config.file=/etc/prometheus/prometheus.yml"
    - "--storage.tsdb.path=/prometheus"
    - "--web.console.libraries=/etc/prometheus/console_libraries"
    - "--web.console.templates=/etc/prometheus/consoles"
    - "--storage.tsdb.retention.time=${RETENTION_TIME}"
    - "--web.enable-lifecycle"
    - "--web.external-url=https://prometheus.${DOMAIN}"
  
  labels:
    - "traefik.enable=true"
    - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
    - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
    - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

# Configuration options
configuration:
  storage:
    retention_time:
      type: "string"
      default: "30d"
      description: "How long to retain metrics data"
    
    retention_size:
      type: "string"
      default: "10GB"
      description: "Maximum storage size for metrics"
  
  scraping:
    global_interval:
      type: "string"
      default: "15s"
      description: "Global scrape interval"
    
    timeout:
      type: "string"
      default: "10s"
      description: "Scrape timeout"
  
  web:
    subdomain:
      type: "string"
      default: "prometheus"
      description: "Subdomain for web interface"
    
    enable_auth:
      type: "boolean"
      default: true
      description: "Enable authentication for web interface"

# Health check
healthcheck:
  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  interval: "30s"
  timeout: "10s"
  retries: 3

# Dependencies
dependencies: []

# URLs generated for this service
urls:
  web: "https://prometheus.${DOMAIN}"

# Storage volumes
volumes:
  - name: "prometheus-data"
    description: "Prometheus time-series database"
  - name: "prometheus-config"
    description: "Prometheus configuration files"

# Configuration files
config_files:
  prometheus.yml:
    path: "/etc/prometheus/prometheus.yml"
    content: |
      global:
        scrape_interval: ${GLOBAL_INTERVAL}
        evaluation_interval: 15s
        scrape_timeout: ${TIMEOUT}
      
      rule_files:
        - "rules/*.yml"
      
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        
        - job_name: 'node-exporter'
          static_configs:
            - targets: ['node-exporter:9100']
        
        - job_name: 'cadvisor'
          static_configs:
            - targets: ['cadvisor:8080']
        
        - job_name: 'traefik'
          static_configs:
            - targets: ['traefik:8080']
          metrics_path: '/metrics'
        
        - job_name: 'docker'
          static_configs:
            - targets: ['docker-proxy:9323']

# Additional services
additional_services:
  node_exporter:
    docker:
      image: "prom/node-exporter:latest"
      container_name: "node-exporter"
      restart: "unless-stopped"
      
      ports:
        - "9100:9100"
      
      volumes:
        - "/proc:/host/proc:ro"
        - "/sys:/host/sys:ro"
        - "/:/rootfs:ro"
      
      networks:
        - "traefik"
      
      command:
        - "--path.procfs=/host/proc"
        - "--path.rootfs=/rootfs"
        - "--path.sysfs=/host/sys"
        - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"

  cadvisor:
    docker:
      image: "gcr.io/cadvisor/cadvisor:latest"
      container_name: "cadvisor"
      restart: "unless-stopped"
      
      ports:
        - "8081:8080"
      
      volumes:
        - "/:/rootfs:ro"
        - "/var/run:/var/run:rw"
        - "/sys:/sys:ro"
        - "/var/lib/docker:/var/lib/docker:ro"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
      
      networks:
        - "traefik"